generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      =  env("DATABASE_URL")
}

model Guest {
  id             Int           @id @default(autoincrement())
  tokenId        Int           @unique
  host           Int
  flag           String
  password       String
  guestPassword  String
  collaboratorId String
  country        String
  status         String
  onLine         Boolean
  startDate      String
  endDate        String
  sprints        GuestSprint[]
  stages         GuestStage[]
  favorites      Favorite[]    @relation("FavoriteToGuest")

  @@index([tokenId])
  @@map("guests")
}

model Favorite {
  id      Int     @id @default(autoincrement())
  hostId  Int
  guestId Int
  guests  Guest[] @relation("FavoriteToGuest")

  @@unique([hostId, guestId])
  @@map("favorites")
}

model Stage {
  id          Int          @id @default(autoincrement())
  stageId     String       @unique
  createdAt   String
  souraName   String
  arabName    String?
  souraNb     Int
  grid        Int
  startOn     String?
  createdById String
  ayahs       String
  guets       GuestStage[]
  sprints     Sprint[]

  @@index([stageId])
  @@map("stages")
}

model Sprint {
  id          Int           @id @default(autoincrement())
  sprintId    String        @unique
  createdAt   String
  startOn     String?
  finishOn    String?
  createdById String?
  published   Boolean?
  stageId     String
  guests      GuestSprint[]
  stage       Stage         @relation(fields: [stageId], references: [stageId], onDelete: Cascade)

  @@unique([sprintId, stageId])
  @@map("sprints")
}

model GuestStage {
  tokenId Int      @map("tokenId")
  stageId String   @map("stageId")
  rate    Int?
  review  String?
  addedAt DateTime @default(now()) @map("added_at")
  stage   Stage    @relation(fields: [stageId], references: [stageId], onDelete: Cascade)
  guest   Guest    @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)

  @@unique([tokenId, stageId])
  @@map("guest_stages")
}

model GuestSprint {
  tokenId  Int      @map("tokenId")
  sprintId String   @map("sprintId")
  rate     Int?
  review   String?
  addedAt  DateTime @default(now()) @map("added_at")
  sprint   Sprint   @relation(fields: [sprintId], references: [sprintId])
  guest    Guest    @relation(fields: [tokenId], references: [tokenId])

  @@unique([sprintId, tokenId, addedAt])
  @@map("guest_sprints")
}
