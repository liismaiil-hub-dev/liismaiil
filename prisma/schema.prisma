// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Guest {
  id             Int        @id @default(autoincrement())
  tokenId        Int        @unique
  host           Int
  flag           String
  password       String
  guestPassword  String
  collaboratorId String
  //status    Role     @default(GUEST)
  country        String
  status         String
  onLine         Boolean
  startDate      DateTime   @default(now())
  endDate        String
  favorites      Favorite[]
  stages GuestStage[]
  sprints GuestSprint[]
  @@index([tokenId])
   @@map("guests")

}

model Favorite {
  id      Int     @id @default(autoincrement())
  hostId  Int
  guestId Int
  guests Guest[]
  
  @@map("favorites")
  @@unique([hostId, guestId])
}

model Stage {
  id          Int       @id @default(autoincrement())
  stageId     String    @unique
  createdAt   DateTime  @default(now())
  souraName   String
  arabName   String?
  souraNb     Int
  grid        Int
  startOn     DateTime?
  createdById String
  ayahs       String

  // @@unique([ createdById,stageId])
  guets GuestStage[]
   @@map("stages")
  @@index([stageId])

  
  sprints Sprint[]
}

model Sprint {
  id          Int      @id @default(autoincrement())
  sprintId    String   @unique
  createdAt   DateTime @default(now())
  startOn     DateTime?
  finishOn     DateTime?
  createdById String?
  published   Boolean?
  stageId   String   
  stage     Stage    @relation(fields: [stageId], references: [stageId], onDelete: Cascade)
  guests GuestSprint[]
   
  @@index([sprintId, stageId])
  @@map("sprints")

}



model GuestStage {
  tokenId   Int   @map("tokenId")
  guest     Guest    @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)
  
  stageId    String   @map("stageId")
  stage      Stage     @relation(fields: [stageId], references: [stageId], onDelete: Cascade)
  
  rate      Int?
  review    String?
  addedAt   DateTime @default(now()) @map("added_at")
  @@id([tokenId, stageId])
  @@map("guest_stages")
 
}
model GuestSprint {
  guest     Guest    @relation(fields: [tokenId], references: [tokenId])
  tokenId   Int   @map("tokenId")
  
  sprint      Sprint     @relation(fields: [sprintId], references: [sprintId])
  sprintId    String   @map("sprintId")
  
  rate      Int?
  review    String?
  addedAt   DateTime @default(now()) @map("added_at")
  @@id([sprintId, tokenId])
  @@map("guest_sprints")
 }
 
 